Week 1 Lab
Put the answers to the questions below in a text file that you add to your GitHub respository.

Exercise 1

Using Visual Studio, create the sample ASP.NET MVC Web application that uses C#.  Leave "No Authentication" selected and "Add unit tests" unchecked.

Start the application without debugging from Visual Studio.

Click on the "About" link in the navigation bar.  What code in the application just got executed?  Hint: Look at the address bar in the browser.
	-->The "About" function (action) in the "Home" class (controller).

Click on the "Application name" in the navigation bar to return to the home page.

In the address bar of the browser, add /home/about to the end of the URL (after the port number) and hit enter.  Explain the process the MVC framework takes to result in the page displayed.  How does the MVC framework know what to display based upon the URL it receives?
	-->The url is parsed into a route which is defined in the RouteConfig class. By default, it maps the first part of the url to a controller, the second part to an action, and the (optional) third part to an id. By convention MVC looks for the view to be displayed by finding the .cshtml file named <action name> contained in the <controller name> folder inside the "Views" folder.


Exercise 2

What part of the Home controller generates the "About" page?
	-->The "About" function.

What data is being generated by the controller to be displayed in the page?
	-->There is a variable named "Message" that contains a string ("Your application description page.") which is passed to the view when it is generated.

Where is the view that the controller invokes to display the page?
	-->Views/Home/About.cshtml

Describe the folder hierarchy convention that allows the MVC framework to find the correct view.
	-->The view, by convention, is in the <controller name> folder inside the "Views" folder. The name of the view is the name of the function (action) that called it. 

Find the place in the view where the data generated by the controller is displayed.  This is a simple example of the Razor syntax for adding C# logic to a view.

Change the data generated by the controller, rebuild and restart the application.  Redisplay the "About" page to see the new data displayed.

Add another piece of data to be displayed in the "About" page.  Redisplay the "About" page to see the new data.


Exercise 3

Create a new empty controller for the "Person" entity in your application with an "Index" method for displaying information for a person.
Right click on the "Controllers" folder, select "Add" and then "Controller".

Start the application in Visual Studio.

Go to the address bar and enter Person after the port number in the URL.  Hit enter.  What do you see?  Why?
	-->Server Error in '/' Application
	-->There is no corresponding view

Create a view for displaying a person.  Right click on the "Person" controller under "Views",
select "Add" and then "View".  Keep all of the default settings in the displayed dialog.
	-->Changed name to "index"

Repeat steps 2 and 3.  What do you see now?
	-->A standard layout view with "index" displayed in the body

Add "person" data to the ViewBag in your new controller.

Add the display of the new "person" data to the view that you created.

Repeat steps 2 and 3.  What do you see now?
	-->The new data I added in the body


Exercise 4

Add a "Person" model to your project.  Right click on "Models", select "Add" and then "Class".
Add data to the "Person" model that you think is relevant to your application.
Complete

Put the code you created for this lab up on a GitHub repository.  Don't forget to include a text file in the repo that contains the answers to the question above.
Send me an email indicating that you finished the lab and include the URL to your GitHub repository for this lab.